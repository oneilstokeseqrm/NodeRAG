name: Multi-Tenant Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'NodeRAG/tenant/**'
      - 'NodeRAG/storage/storage_factory_tenant.py'
      - 'NodeRAG/src/pipeline/graph_pipeline_tenant.py'
      - 'tests/test_multi_tenant_*.py'
      - 'tests/test_tenant_*.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'NodeRAG/tenant/**'
      - 'NodeRAG/storage/storage_factory_tenant.py'
      - 'NodeRAG/src/pipeline/graph_pipeline_tenant.py'
      - 'tests/test_multi_tenant_*.py'
      - 'tests/test_tenant_*.py'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
    
    - name: Run multi-tenant isolation tests
      env:
        PYTHONPATH: ${{ github.workspace }}
        NODERAG_MAX_ACTIVE_TENANTS: 100
        NODERAG_MAX_REGISTRY_SIZE: 500
        NODERAG_ENFORCE_TENANT_LIMITS: true
      run: |
        pytest tests/test_multi_tenant_isolation.py -v --tb=short
    
    - name: Run tenant resource limit tests
      env:
        PYTHONPATH: ${{ github.workspace }}
        NODERAG_ENFORCE_TENANT_LIMITS: true
      run: |
        pytest tests/test_tenant_resource_limits.py -v --tb=short
    
    - name: Run concurrent tenant operations test
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python examples/test_concurrent_tenants.py
    
    - name: Run comprehensive validation
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python examples/validate_tenant_isolation.py
    
    - name: Check for memory leaks
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python -c "
from NodeRAG.tenant.tenant_context import TenantContext
import gc

# Create many tenants
for i in range(100):
    TenantContext.set_current_tenant(f'leak_test_{i}')
    TenantContext.clear_current_tenant()

# Force cleanup
TenantContext._force_cleanup_inactive_tenants()
gc.collect()

# Check stats
stats = TenantContext.get_registry_stats()
print(f'Registry stats after cleanup: {stats}')

# Verify cleanup worked
assert stats['total_tenants'] <= 100, 'Memory leak detected - tenants not cleaned up'
print('âœ… No memory leak detected')
        "
